What is Terraform?

Terraform is an open-source infrastructure as Code tool developed by HashiCorp. 
It is used to define and provision the complete infrastructure using an easy-to-learn declarative language.

It is an infrastructure provisioning tool where you can store your cloud infrastructure setup as codes.
Itâ€™s very similar to tools such as CloudFormation, which you would use to automate your AWS infrastructure, 
but you can only use that on AWS. With Terraform, you can use it on other cloud platforms as well.

Benifits of Terraform:

Support Multiple Providers like AWS,GCP,Azure,Digital Ocean,Alibaba Cloud.

Easy to easy and understandable language.

Terraform Cli Installation in windows .


https://www.decodingdevops.com/how-to-install-terraform-on-windows-10-or-8-or-7-decodingdevops/

.tf
ec2.tf
{
ec2 hari


}
Terraform states:

1)init
 
Initialize prepares the working directory so Terraform can run the configuration.

 It creates .terraform folder

2) plan

Plan lets you preview any changes before you apply them.

3) validate
 It acts as dry-run and will check any errors in the configuration files.

4) apply
Apply executes the changes defined by your Terraform configuration to create, update, or destroy resource

5) destroy
  To destroy resources which is created using terraform.

EC2-Installation using Terraform:

https://www.decodingdevops.com/create-aws-ec2-instance-using-terraform-template/
https://haridba7.blogspot.com/2022/06/how-to-create-ec2-instance-using.html

Pre-Requisties:

GitBash
Terraform cli.

1) Generate AWS access key and secret key in AWS console.

2) Generate pem key.(Key_name: terraform)

########  update access_key and secreat_key which is generated in AWS console.

Demo:

#mkdir devops-terraform
#cd devops-terraform
#cat provider.tf

provider "aws" {
access_key = "AKIA4TRAWXOVKIJOVYNL"
secret_key = "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"
region = "us-east-1"
}


cat ec2.tf



########## resource  <provider_resource> "resourcename"

resource "aws_instance" "web" {
ami = "ami-00068cd7555f543d5"
instance_type = "t2.micro"
key_name = "terraform"

tags = {
Name = "HelloWorld"
}
}

# terraform init
# terraform plan
# terraform validate
# terraform apply


commands:

terraform init
terraform plan
terraform validate
terraform apply
terraform destroy


########### Once the EC2 machine is created ,Validate resources in AWS console and login into server.



Scenario 2:

How to print public ip address of ec2 instance in terraform console.
 
###### Add below code into ec2.tf file and refresh the terraform state using terraform refresh,It will print public Ip into Terraform console.


output "aws_public_ip" {
value = aws_instance.web.public_ip
}

# cat ec2.tf

resource "aws_instance" "web" {
ami = "ami-00068cd7555f543d5"
instance_type = "t2.micro"
key_name = "terraform"

tags = {
Name = "HelloWorld"
}
}
output "aws_public_ip" {
value = aws_instance.web.public_ip
}

# terraform refresh
# terraform output

o/p: it will display public Ip into console.


Scenarion 3: How to create custom security group 

resource "aws_security_group" "terraform-SG" {
  name = "Terraform-SG"
  description = "Terraform Security Group"

  ingress {
    from_port = 22
    to_port = 22
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }    

  ingress {
    from_port = 9000
    to_port = 9000
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }      
  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}